// === DOM Elements ===
const cardsContainer = document.getElementById("cardsContainer");
const addGameForm = document.getElementById("addGameForm");
const gameTitle = document.getElementById("gameTitle");
const gameImage = document.getElementById("gameImage");
const gameDescription = document.getElementById("gameDescription");
const gameSearchInput = document.getElementById("gameSearch");
const searchResults = document.getElementById("searchResults");
const searchInput = document.getElementById("searchInput");
const filterSelect = document.getElementById("filterSelect");
const doneCountEl = document.getElementById("doneCount");
const authBtn = document.getElementById("authBtn");
const userStatus = document.getElementById("userStatus");
const themeToggle = document.getElementById("themeToggle");
const authOnlyOverlay = document.getElementById("authOnlyOverlay");
const authRequiredLoginBtn = document.getElementById("authRequiredLoginBtn");

let games = [];
let currentUser = null;
let isLoadingAuth = true;
// === Firebase Setup ===
const firebaseConfig = {
  apiKey: "AIzaSyDhMfbhd7emAXNKDexXxaCxZ0k2DfkRcVg",
  authDomain: "my-games-app-hub.firebaseapp.com",
  databaseURL: "https://my-games-app-hub-default-rtdb.firebaseio.com",
  projectId: "my-games-app-hub",
  storageBucket: "my-games-app-hub.appspot.com",
  messagingSenderId: "251367004030",
  appId: "1:251367004030:web:2b1be1b1c76ee80c0d052f"
};
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const database = firebase.database();

// === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ===
const CACHE_KEY = "gameSearchCache";
const searchCache = loadCacheFromStorage();

function loadCacheFromStorage() {
  return JSON.parse(localStorage.getItem(CACHE_KEY)) || {};
}

function saveCacheToStorage() {
  localStorage.setItem(CACHE_KEY, JSON.stringify(searchCache));
}

function getFromCache(query) {
  const cached = searchCache[query];
  if (cached && Date.now() < cached.expiresAt) return cached.data;
  return null;
}

function setToCache(query, data, ttl = 3600000) {
  searchCache[query] = { data, expiresAt: Date.now() + ttl };
  saveCacheToStorage();
}

// === RAWG API –ø–æ–∏—Å–∫ ===
const RAWG_API_KEY = "48b79844fcc44af7860a5fa89de88ca8";

async function searchGame(query) {
  const cached = getFromCache(query);
  if (cached) return cached;
  try {
    const response = await fetch(
      `https://api.rawg.io/api/games?key=${RAWG_API_KEY}&search=${encodeURIComponent(query)}`
    );
    const data = await response.json();
    const results = data.results || [];
    setToCache(query, results);
    return results;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", err);
    return [];
  }
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–≥—Ä–∞–º ===
let debounceTimer;
gameSearchInput.addEventListener("input", e => {
  const query = e.target.value.trim();
  if (query.length < 2) {
    searchResults.innerHTML = "";
    return;
  }
  clearTimeout(debounceTimer);
  searchResults.innerHTML = "<li>–ò—â–µ–º –∏–≥—Ä—ã...</li>";
  debounceTimer = setTimeout(async () => {
    const results = await searchGame(query);
    renderSearchResults(results);
  }, 500);
});

function renderSearchResults(results) {
  searchResults.innerHTML = "";
  if (results.length === 0) {
    searchResults.innerHTML = "<li>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</li>";
    return;
  }
  results.slice(0, 5).forEach(game => {
    const li = document.createElement("li");
    li.innerHTML = `
      <div style="display: flex; align-items: center;">
        <img src="${game.background_image}" alt="${game.name}" width="40" style="margin-right: 10px; border-radius: 4px;">
        <div>
          <strong>${game.name}</strong><br>
          <small>${game.short_description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</small>
        </div>
      </div>
    `;
    li.addEventListener("click", () => {
      gameTitle.value = game.name;
      gameImage.value = game.background_image;
      gameDescription.value = game.short_description || "";
      searchResults.innerHTML = "";
    });
    searchResults.appendChild(li);
  });
}

// === –¢–µ–º–∞ ===
function setTheme(theme) {
  document.body.classList.remove("dark-theme", "light-theme");
  document.body.classList.add(`${theme}-theme`);
  themeToggle.textContent = theme === "dark" ? "üåô –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É" : "‚òÄÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É";
  localStorage.setItem("theme", theme);
  updateParticleColor(theme);
}
themeToggle.addEventListener("click", () => {
  const currentTheme = localStorage.getItem("theme") || "dark";
  setTheme(currentTheme === "dark" ? "light" : "dark");
});
window.addEventListener("DOMContentLoaded", () => {
  const savedTheme = localStorage.getItem("theme") || "dark";
  setTheme(savedTheme);
});

// === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
authBtn.addEventListener("click", () => {
  if (currentUser) {
    auth.signOut().then(() => {
      localStorage.removeItem("games");
    });
  } else {
    const provider = new firebase.auth.GoogleAuthProvider();
    auth.signInWithPopup(provider).catch(err => alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + err.message));
  }
});
authRequiredLoginBtn.addEventListener("click", () => {
  const provider = new firebase.auth.GoogleAuthProvider();
  auth.signInWithPopup(provider).catch(err => alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + err.message));
});

// === –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
auth.onAuthStateChanged((user) => {
  isLoadingAuth = false;
  if (user) {
    currentUser = user;
    authBtn.textContent = "–í—ã–π—Ç–∏";
    userStatus.textContent = `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${user.displayName}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ Firebase
    database.ref(`users/${currentUser.uid}`).once("value").then(snapshot => {
      const data = snapshot.val();
      games = data?.games || []; // ‚ùó –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω

      applyFilters();
      toggleAuthUI(false);
    }).catch(console.error);

  } else {
    currentUser = null;
    authBtn.textContent = "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google";
    userStatus.textContent = "–í—ã –Ω–µ –≤–æ—à–ª–∏";
    games = []; // ‚ùó –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤—Å–µ–≥–¥–∞ —á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫
    applyFilters();
    toggleAuthUI(true);
  }
});

function toggleAuthUI(isVisible) {
  if (isLoadingAuth) return; // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
  authOnlyOverlay.style.display = isVisible ? "flex" : "none";
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
function saveData() {
  if (currentUser) {
    database.ref(`users/${currentUser.uid}`).set({ games });
  } else {
    localStorage.setItem("games", JSON.stringify(games));
  }
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã ===
addGameForm.addEventListener("submit", e => {
  e.preventDefault();
  games.push({
    id: Date.now(),
    title: gameTitle.value.trim(),
    image: gameImage.value.trim(),
    description: gameDescription.value.trim(),
    status: "want",
    rating: 0
  });
  saveData();
  applyFilters();
  addGameForm.reset();
});

// === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
document.addEventListener("DOMContentLoaded", () => {
  searchInput.addEventListener("input", applyFilters);
  filterSelect.addEventListener("change", applyFilters);
});

function applyFilters() {
  const term = searchInput.value.toLowerCase();
  const filter = filterSelect.value;
  const filtered = games.filter(g =>
    g.title.toLowerCase().includes(term) &&
    (filter === "all" || g.status === filter)
  );
  renderFilteredGames(filtered);
}

function renderFilteredGames(filteredGames) {
  const existingCards = [...cardsContainer.querySelectorAll(".card")];

  filteredGames.forEach((game, index) => {
    let card = existingCards.find(c => c.dataset.id == game.id);

    if (!card) {
      card = document.createElement("div");
      card.className = "card";
      card.setAttribute("data-id", game.id);
      card.innerHTML = `
        <img src="${game.image}" alt="${game.title}">
        <h2>${game.title}</h2>
        <span class="status ${game.status}">${game.status === "done" ? "–ü—Ä–æ–π–¥–µ–Ω–∞" : "–•–æ—á—É –ø—Ä–æ–π—Ç–∏"}</span>
        <div class="stars" data-rating="${game.rating || 0}"></div>
        <small>–î–æ–±–∞–≤–ª–µ–Ω–æ</small>
        <textarea class="description">${game.description || ""}</textarea>
        <button class="delete-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      `;

      const starsEl = card.querySelector(".stars");
      for (let i = 1; i <= 5; i++) {
        const star = document.createElement("span");
        star.textContent = "‚òÖ";
        star.dataset.rating = i;
        starsEl.appendChild(star);
      }

      updateStarDisplay(starsEl, game.rating || 0);

      // –ó–≤—ë–∑–¥—ã
      starsEl.addEventListener("click", e => {
        if (e.target.tagName === "SPAN") {
          game.rating = parseInt(e.target.dataset.rating);
          updateStarDisplay(starsEl, game.rating);
          saveData();
        }
      });

      // –°—Ç–∞—Ç—É—Å
const statusEl = card.querySelector(".status");
statusEl.addEventListener("click", () => {
  game.status = game.status === "done" ? "want" : "done";
  saveData();
  updateCard(card, game);
  updateStats(); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
});

      // –û–ø–∏—Å–∞–Ω–∏–µ
      const descEl = card.querySelector(".description");
      descEl.addEventListener("input", () => {
        game.description = descEl.value;
        saveData();
      });

      // –£–¥–∞–ª–µ–Ω–∏–µ
const deleteBtn = card.querySelector(".delete-btn");
deleteBtn.addEventListener("click", () => {
  games.splice(index, 1);
  saveData();
  applyFilters();
  updateStats(); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
});

      cardsContainer.appendChild(card);
    } else {
      updateCard(card, game);
    }
  });

  // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  existingCards.forEach(card => {
    if (!filteredGames.some(g => g.id == card.dataset.id)) {
      card.remove();
    }
  });

  updateStats();
}

function updateCard(card, game) {
  const statusEl = card.querySelector(".status");
  statusEl.className = `status ${game.status}`;
  statusEl.textContent = game.status === "done" ? "–ü—Ä–æ–π–¥–µ–Ω–∞" : "–•–æ—á—É –ø—Ä–æ–π—Ç–∏";

  const starsEl = card.querySelector(".stars");
  updateStarDisplay(starsEl, game.rating || 0);

  const descEl = card.querySelector(".description");
  descEl.value = game.description || "";
}

function updateStarDisplay(container, rating) {
  container.querySelectorAll("span").forEach((star, idx) => {
    star.classList.toggle("active", idx < rating);
  });
}

function updateStats() {
  doneCountEl.textContent = games.filter(g => g.status === "done").length;
}

// ==== –≠–ö–°–ü–û–†–¢ / –ò–ú–ü–û–†–¢ ====
document.getElementById("exportBtn").addEventListener("click", () => {
  const blob = new Blob([JSON.stringify(games, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "my-games.json";
  a.click();
  URL.revokeObjectURL(url);
});

document.getElementById("importInput").addEventListener("change", e => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = event => {
    try {
      games = JSON.parse(event.target.result);
      saveData();
      applyFilters();
      alert("‚úÖ –ò–≥—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
    } catch (e) {
      alert("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞.");
    }
  };
  reader.readAsText(file);
});

// === –ß–∞—Å—Ç–∏—Ü—ã —á–µ—Ä–µ–∑ Canvas —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞ –º—ã—à—å –∏ —Ü–≤–µ—Ç–æ–º –ø–æ–¥ —Ç–µ–º—É ===
const canvas = document.getElementById("particles");
const ctx = canvas.getContext("2d");

let particles = [];
let width, height;
let mouseX = window.innerWidth / 2;
let mouseY = window.innerHeight / 2;

function resizeCanvas() {
  width = (canvas.width = window.innerWidth);
  height = (canvas.height = window.innerHeight);
}
resizeCanvas();
window.addEventListener("resize", resizeCanvas);

window.addEventListener("mousemove", e => {
  mouseX = e.clientX;
  mouseY = e.clientY;
});

class Particle {
  constructor() {
    this.reset();
  }

  reset() {
    this.x = Math.random() * width;
    this.y = Math.random() * height;
    this.vx = (Math.random() - 0.5) * 0.5;
    this.vy = (Math.random() - 0.5) * 0.5;
    this.radius = Math.random() * 2 + 1;
    this.alpha = Math.random() * 0.5 + 0.3;
    this.color = currentParticleColor;
  }

  draw() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(${this.color}, ${this.alpha})`;
    ctx.fill();
  }

  update() {
    const dx = this.x - mouseX;
    const dy = this.y - mouseY;
    const dist = Math.sqrt(dx * dx + dy * dy);
    if (dist < 200) {
      this.vx -= dx / 2000;
      this.vy -= dy / 2000;
    }
    this.x += this.vx;
    this.y += this.vy;
    if (this.x < 0 || this.x > width) this.reset();
    if (this.y < 0 || this.y > height) this.reset();
  }
}

function createParticles(num = 190) {
  particles = [];
  for (let i = 0; i < num; i++) {
    particles.push(new Particle());
  }
}

let currentParticleColor = "255, 255, 255";

function setParticleColor(color) {
  currentParticleColor = color;
  particles.forEach(p => {
    p.color = color;
  });
}

function animateParticles() {
  ctx.clearRect(0, 0, width, height);
  particles.forEach(p => {
    p.update();
    p.draw();
  });

  // –õ–∏–Ω–∏–∏ –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
  for (let i = 0; i < particles.length; i++) {
    for (let j = i + 1; j < particles.length; j++) {
      const p1 = particles[i];
      const p2 = particles[j];
      const dx = p1.x - p2.x;
      const dy = p1.y - p2.y;
      const dist = Math.sqrt(dx * dx + dy * dy);
      if (dist < 100) {
        ctx.strokeStyle = `rgba(${currentParticleColor}, ${0.7 * (1 - dist / 100)})`;
        ctx.lineWidth = 0.5;
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
      }
    }
  }

  // –õ–∏–Ω–∏–∏ –∫ –∫—É—Ä—Å–æ—Ä—É
  ctx.strokeStyle = `rgba(${currentParticleColor}, 0.2)`;
  for (let p of particles) {
    const dx = p.x - mouseX;
    const dy = p.y - mouseY;
    const dist = Math.sqrt(dx * dx + dy * dy);
    if (dist < 150) {
      ctx.beginPath();
      ctx.moveTo(p.x, p.y);
      ctx.lineTo(mouseX, mouseY);
      ctx.stroke();
    }
  }

  requestAnimationFrame(animateParticles);
}

// === –¶–≤–µ—Ç —á–∞—Å—Ç–∏—Ü –ø–æ–¥ —Ç–µ–º—É ===
function updateParticleColor(theme) {
  if (theme === "dark") {
    setParticleColor("255, 255, 255");
  } else {
    setParticleColor("50, 50, 50");
  }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
createParticles();
animateParticles();

// === –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ===
const menuToggle = document.getElementById("menuToggle");
const sidebar = document.getElementById("sidebar");
const menuClose = document.getElementById("menuClose");

function openSidebar() {
  sidebar.classList.add("open");
  menuToggle.style.zIndex = "1000"; /* –ú–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∑–∞ –º–µ–Ω—é */
}

function closeSidebar() {
  sidebar.classList.remove("open");
  menuToggle.style.zIndex = "1002"; /* –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–≤–µ—Ä—Ö */
}

menuToggle.addEventListener("click", openSidebar);

menuClose.addEventListener("click", closeSidebar);

document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") {
    closeSidebar();
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é
document.addEventListener("click", (e) => {
  if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
    closeSidebar();
  }
});

// DOM Elements –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
const profileSection = document.getElementById("profileSection");
const profileNickname = document.getElementById("profileNickname");
const profileUserId = document.getElementById("profileUserId");
const profileUserIdSpan = document.getElementById("profileUserId")?.querySelector("span");
const copyUserIdBtn = document.querySelector(".copy-btn");
const profileAvatar = document.getElementById("profileAvatar");
const profileDoneCount = document.getElementById("profileDoneCount");
const nicknameInput = document.getElementById("nicknameInput");
const avatarUrlInput = document.getElementById("avatarUrlInput");
const avatarInput = document.getElementById("avatarInput");
const profileDescriptionInput = document.getElementById("profileDescriptionInput");
const editProfileForm = document.getElementById("editProfileForm");

let uploadedAvatarDataURL = null;

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ UID Firebase ===
function generateNumericId(uid) {
  // –ë–µ—Ä—ë–º —Ö—ç—à –æ—Ç UID –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
  let hash = 0;
  for (let i = 0; i < uid.length; i++) {
    hash = ((hash << 5) - hash + uid.charCodeAt(i)) | 0;
  }
  return Math.abs(hash).toString().slice(0, 7); // 7-–∑–Ω–∞—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é "–ü—Ä–æ—Ñ–∏–ª—å" ===
document.querySelector('[href="#profile"]').addEventListener("click", (e) => {
  e.preventDefault();
  closeSidebar();

  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
  document.querySelectorAll(".cards, .add-game, .search-filter, .backup-section").forEach(el => {
    el.classList.add("hidden");
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  profileSection.classList.remove("hidden");

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
  updateProfileUI();
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Firebase ===
function updateProfileUI() {
  if (!currentUser) return;

  const userRef = database.ref(`users/${currentUser.uid}`);
  const profileRef = database.ref(`profiles/${currentUser.uid}`);

  Promise.all([
    userRef.once("value"),
    profileRef.once("value")
  ]).then(([userSnapshot, profileSnapshot]) => {
    const userData = userSnapshot.val() || {};
    const profileData = profileSnapshot.val() || {};

    const gamesList = userData.games || [];

    const nickname = profileData.nickname || currentUser.displayName || currentUser.email || "–ë–µ–∑ –Ω–∏–∫–∞";
    const avatarUrl = profileData.avatarUrl || currentUser.photoURL || "https://i.pravatar.cc/150?img=1 ";

    profileNickname.textContent = nickname;
    profileAvatar.src = avatarUrl;
    nicknameInput.value = nickname;
    avatarUrlInput.value = profileData.avatarUrl || "";
    profileDescriptionInput.value = profileData.description || "";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
    const numericId = generateNumericId(currentUser.uid);
    if (profileUserIdSpan) profileUserIdSpan.textContent = numericId;

    profileDoneCount.textContent = gamesList.filter(g => g.status === "done").length;
  });
}

// === –ö–ª–∏–∫ –ø–æ –∞–≤–∞—Ç–∞—Ä—É ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ ===
profileAvatar.addEventListener("click", () => {
  avatarInput.click();
});

// === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ ===
avatarInput.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (file && file.type.startsWith("image/")) {
    const reader = new FileReader();
    reader.onload = function (event) {
      profileAvatar.src = event.target.result;
      uploadedAvatarDataURL = event.target.result;
    };
    reader.readAsDataURL(file);
  }
});

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è ===
editProfileForm.addEventListener("submit", (e) => {
  e.preventDefault();

  const newNick = nicknameInput.value.trim();
  let newAvatar = uploadedAvatarDataURL || avatarUrlInput.value.trim();
  const newDescription = profileDescriptionInput.value.trim();

  if (!newNick) {
    alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º!");
    return;
  }

  if (!newAvatar) {
    newAvatar = "https://i.pravatar.cc/150?img=1 "; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
  }

  if (currentUser && newNick) {
    firebase.auth().currentUser.updateProfile({
      displayName: newNick,
      photoURL: newAvatar
    }).then(() => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
      database.ref(`profiles/${currentUser.uid}`).set({
        nickname: newNick,
        avatarUrl: newAvatar,
        description: newDescription,
        userId: generateNumericId(currentUser.uid),
        joinedAt: new Date().toISOString()
      });

      alert("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
      uploadedAvatarDataURL = null;
      updateProfileUI();
    }).catch(err => {
      alert("‚ùå –û—à–∏–±–∫–∞: " + err.message);
    });
  }
});

// === –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ===
if (copyUserIdBtn) {
  copyUserIdBtn.addEventListener("click", () => {
    const userId = profileUserIdSpan.textContent;
    navigator.clipboard.writeText(userId).then(() => {
      copyUserIdBtn.title = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!";
      copyUserIdBtn.textContent = "‚úÖ";
      setTimeout(() => {
        copyUserIdBtn.textContent = "üìã";
        copyUserIdBtn.title = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
      }, 1000);
    }).catch(() => {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID");
    });
  });
}

// === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ ===
function createProfileIfNotExists(user) {
  const profileRef = database.ref(`profiles/${user.uid}`);
  profileRef.once("value").then(snapshot => {
    if (!snapshot.exists()) {
      profileRef.set({
        nickname: user.displayName || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        avatarUrl: user.photoURL || "https://i.pravatar.cc/150?img=1 ",
        description: "",
        userId: generateNumericId(user.uid),
        joinedAt: new Date().toISOString()
      }).catch(console.error);
    }
  });
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
auth.onAuthStateChanged((user) => {
  isLoadingAuth = false;
  if (user) {
    currentUser = user;
    createProfileIfNotExists(user); // <-- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    authBtn.textContent = "–í—ã–π—Ç–∏";
    userStatus.textContent = `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${user.displayName}`;
    database.ref(`users/${currentUser.uid}`).once("value").then(snapshot => {
      const data = snapshot.val();
      games = data?.games || [];
      applyFilters();
      toggleAuthUI(false);
    }).catch(console.error);
  } else {
    currentUser = null;
    authBtn.textContent = "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google";
    userStatus.textContent = "–í—ã –Ω–µ –≤–æ—à–ª–∏";
    games = [];
    applyFilters();
    toggleAuthUI(true);
  }
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥—Ä—É–∑–µ–π ===
const friendsSection = document.createElement("section");
friendsSection.id = "friendsSection";
friendsSection.className = "profile-section hidden";
friendsSection.innerHTML = `
  <h2>–ú–æ–∏ –¥—Ä—É–∑—å—è</h2>
  <div id="friendsList" class="friends-list"></div>
  <button id="addFriendBtn" class="accent-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞</button>
`;
document.body.appendChild(friendsSection);

const friendsList = document.getElementById("friendsList");
const addFriendBtn = document.getElementById("addFriendBtn");

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ #friends –∏ #friends/profile/uid ===
window.addEventListener("hashchange", () => {
  const hash = window.location.hash.substring(1);
  if (hash === "friends") {
    showFriendsList();
  } else if (hash.startsWith("friends/profile/")) {
    const friendUid = hash.replace("friends/profile/", "");
    showFriendProfile(friendUid);
  }
});

// === –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π ===
function showFriendsList() {
  closeSidebar();

  document.querySelectorAll(".cards, .add-game, .search-filter, .backup-section, #profileSection").forEach(el => {
    el.classList.add("hidden");
  });

  friendsSection.classList.remove("hidden");
  loadFriends();
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π ===
function loadFriends() {
  if (!currentUser) return;

  const friendsRef = database.ref(`friends/${currentUser.uid}`);
  friendsList.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–∑–µ–π...</p>";

  friendsRef.once("value").then(snapshot => {
    const friends = snapshot.val() || {};
    const uids = Object.keys(friends);

    if (uids.length === 0) {
      friendsList.innerHTML = "<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.</p>";
      return;
    }

    friendsList.innerHTML = "";

    uids.forEach(uid => {
      database.ref(`profiles/${uid}`).once("value").then(profileSnap => {
        const data = profileSnap.val();
        if (!data) return;

        const card = document.createElement("div");
        card.className = "friend-card";
        card.innerHTML = `
          <img src="${data.avatarUrl}" alt="${data.nickname}">
          <h4>${data.nickname}</h4>
          <small>ID: ${data.userId}</small>
          <button onclick="viewFriendProfile('${uid}')">üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
        `;
        friendsList.appendChild(card);
      });
    });
  }).catch(console.error);
}

window.viewFriendProfile = function(uid) {
  window.location.hash = `#friends/profile/${uid}`;
};

// === –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è ===
function showFriendProfile(uid) {
  closeSidebar();

  document.querySelectorAll(".cards, .add-game, .search-filter, .backup-section, #profileSection").forEach(el => {
    el.classList.add("hidden");
  });

  let friendProfileContainer = document.getElementById("friendProfile");
  if (!friendProfileContainer) {
    friendProfileContainer = document.createElement("section");
    friendProfileContainer.id = "friendProfile";
    friendProfileContainer.className = "profile-section hidden";
    document.body.appendChild(friendProfileContainer);
  }

  friendProfileContainer.classList.remove("hidden");

  Promise.all([
    database.ref(`profiles/${uid}`).once("value"),
    database.ref(`users/${uid}/games`).once("value")
  ]).then(([profileSnap, gamesSnap]) => {
    const profile = profileSnap.val();
    const games = gamesSnap.val() || [];

    const doneCount = games.filter(g => g.status === "done").length;

    const html = `
      <div class="profile-card">
        <img src="${profile?.avatarUrl || 'https://i.pravatar.cc/150?img=1 '}" class="profile-avatar" alt="–ê–≤–∞—Ç–∞—Ä">
        <h2>${profile?.nickname || "–ì–æ—Å—Ç—å"}</h2>
        <p class="profile-user-id">ID: <span>${profile?.userId || '‚Äî'}</span></p>
        <div class="profile-stats">
          <p>–ü—Ä–æ–π–¥–µ–Ω–æ –∏–≥—Ä: <strong>${doneCount}</strong></p>
        </div>
        <button onclick="goBackToFriends()" class="accent-btn">‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥—Ä—É–∑–µ–π</button>
      </div>
    `;
    friendProfileContainer.innerHTML = html;
  });
}

function goBackToFriends() {
  window.location.hash = "#friends";
}
